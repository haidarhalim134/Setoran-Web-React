/* tslint:disable */
/* eslint-disable */
/**
 * MyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Diskon,
  PostDiskonDTO,
  PutDiskonDTO,
} from '../models/index';
import {
    DiskonFromJSON,
    DiskonToJSON,
    PostDiskonDTOFromJSON,
    PostDiskonDTOToJSON,
    PutDiskonDTOFromJSON,
    PutDiskonDTOToJSON,
} from '../models/index';

export interface DiskonGenericIdDeleteRequest {
    id: number;
}

export interface DiskonGenericIdGetRequest {
    id: number;
}

export interface DiskonGetAllGetRequest {
    withMotor?: boolean;
}

export interface DiskonPostRequest {
    postDiskonDTO?: PostDiskonDTO;
}

export interface DiskonPutRequest {
    putDiskonDTO?: PutDiskonDTO;
}

/**
 * 
 */
export class DiskonApi extends runtime.BaseAPI {

    /**
     */
    async diskonGenericIdDeleteRaw(requestParameters: DiskonGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling diskonGenericIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Diskon/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async diskonGenericIdDelete(requestParameters: DiskonGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.diskonGenericIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async diskonGenericIdGetRaw(requestParameters: DiskonGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Diskon>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling diskonGenericIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Diskon/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiskonFromJSON(jsonValue));
    }

    /**
     */
    async diskonGenericIdGet(requestParameters: DiskonGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Diskon> {
        const response = await this.diskonGenericIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async diskonGetAllGetRaw(requestParameters: DiskonGetAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Diskon>>> {
        const queryParameters: any = {};

        if (requestParameters['withMotor'] != null) {
            queryParameters['withMotor'] = requestParameters['withMotor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Diskon/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DiskonFromJSON));
    }

    /**
     */
    async diskonGetAllGet(requestParameters: DiskonGetAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Diskon>> {
        const response = await this.diskonGetAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async diskonPostRaw(requestParameters: DiskonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Diskon>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Diskon`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDiskonDTOToJSON(requestParameters['postDiskonDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiskonFromJSON(jsonValue));
    }

    /**
     */
    async diskonPost(requestParameters: DiskonPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Diskon> {
        const response = await this.diskonPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async diskonPutRaw(requestParameters: DiskonPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Diskon`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutDiskonDTOToJSON(requestParameters['putDiskonDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async diskonPut(requestParameters: DiskonPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.diskonPutRaw(requestParameters, initOverrides);
    }

}
