/* tslint:disable */
/* eslint-disable */
/**
 * MyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckVoucherDTO,
  PostVoucherDTO,
  StatusVoucher,
  Voucher,
} from '../models/index';
import {
    CheckVoucherDTOFromJSON,
    CheckVoucherDTOToJSON,
    PostVoucherDTOFromJSON,
    PostVoucherDTOToJSON,
    StatusVoucherFromJSON,
    StatusVoucherToJSON,
    VoucherFromJSON,
    VoucherToJSON,
} from '../models/index';

export interface VoucherCheckVoucherCodeGetRequest {
    code: string;
}

export interface VoucherFilteredGetRequest {
    search?: string;
    status?: StatusVoucher;
    start?: Date;
    end?: Date;
}

export interface VoucherGenericIdDeleteRequest {
    id: number;
}

export interface VoucherGenericIdGetRequest {
    id: number;
}

export interface VoucherGetByCodeCodeGetRequest {
    code: string;
}

export interface VoucherPostRequest {
    postVoucherDTO?: PostVoucherDTO;
}

export interface VoucherPutRequest {
    voucher?: Voucher;
}

/**
 * 
 */
export class VoucherApi extends runtime.BaseAPI {

    /**
     */
    async voucherCheckVoucherCodeGetRaw(requestParameters: VoucherCheckVoucherCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckVoucherDTO>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling voucherCheckVoucherCodeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Voucher/checkVoucher/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckVoucherDTOFromJSON(jsonValue));
    }

    /**
     */
    async voucherCheckVoucherCodeGet(requestParameters: VoucherCheckVoucherCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckVoucherDTO> {
        const response = await this.voucherCheckVoucherCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async voucherFilteredGetRaw(requestParameters: VoucherFilteredGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Voucher>>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Voucher/filtered`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VoucherFromJSON));
    }

    /**
     */
    async voucherFilteredGet(requestParameters: VoucherFilteredGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Voucher>> {
        const response = await this.voucherFilteredGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async voucherGenericIdDeleteRaw(requestParameters: VoucherGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling voucherGenericIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Voucher/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async voucherGenericIdDelete(requestParameters: VoucherGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.voucherGenericIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async voucherGenericIdGetRaw(requestParameters: VoucherGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Voucher>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling voucherGenericIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Voucher/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoucherFromJSON(jsonValue));
    }

    /**
     */
    async voucherGenericIdGet(requestParameters: VoucherGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Voucher> {
        const response = await this.voucherGenericIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async voucherGetActiveGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Voucher>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Voucher/getActive`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VoucherFromJSON));
    }

    /**
     */
    async voucherGetActiveGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Voucher>> {
        const response = await this.voucherGetActiveGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async voucherGetByCodeCodeGetRaw(requestParameters: VoucherGetByCodeCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Voucher>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling voucherGetByCodeCodeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Voucher/getByCode/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoucherFromJSON(jsonValue));
    }

    /**
     */
    async voucherGetByCodeCodeGet(requestParameters: VoucherGetByCodeCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Voucher> {
        const response = await this.voucherGetByCodeCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async voucherPostRaw(requestParameters: VoucherPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Voucher>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Voucher`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostVoucherDTOToJSON(requestParameters['postVoucherDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoucherFromJSON(jsonValue));
    }

    /**
     */
    async voucherPost(requestParameters: VoucherPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Voucher> {
        const response = await this.voucherPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async voucherPutRaw(requestParameters: VoucherPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Voucher`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VoucherToJSON(requestParameters['voucher']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async voucherPut(requestParameters: VoucherPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.voucherPutRaw(requestParameters, initOverrides);
    }

}
