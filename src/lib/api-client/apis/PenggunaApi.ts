/* tslint:disable */
/* eslint-disable */
/**
 * MyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Pengguna,
  PostPenggunaDTO,
} from '../models/index';
import {
    PenggunaFromJSON,
    PenggunaToJSON,
    PostPenggunaDTOFromJSON,
    PostPenggunaDTOToJSON,
} from '../models/index';

export interface PenggunaGenericIdDeleteRequest {
    id: number;
}

export interface PenggunaGenericIdGetRequest {
    id: number;
}

export interface PenggunaGetAllGetRequest {
    withMitra?: boolean;
    withPelanggan?: boolean;
}

export interface PenggunaPutRequest {
    postPenggunaDTO?: PostPenggunaDTO;
}

/**
 * 
 */
export class PenggunaApi extends runtime.BaseAPI {

    /**
     */
    async penggunaCurrentPenggunaGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pengguna>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Pengguna/currentPengguna`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PenggunaFromJSON(jsonValue));
    }

    /**
     */
    async penggunaCurrentPenggunaGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pengguna> {
        const response = await this.penggunaCurrentPenggunaGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async penggunaGenericIdDeleteRaw(requestParameters: PenggunaGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling penggunaGenericIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Pengguna/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async penggunaGenericIdDelete(requestParameters: PenggunaGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.penggunaGenericIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async penggunaGenericIdGetRaw(requestParameters: PenggunaGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pengguna>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling penggunaGenericIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Pengguna/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PenggunaFromJSON(jsonValue));
    }

    /**
     */
    async penggunaGenericIdGet(requestParameters: PenggunaGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pengguna> {
        const response = await this.penggunaGenericIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async penggunaGetAllGetRaw(requestParameters: PenggunaGetAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Pengguna>>> {
        const queryParameters: any = {};

        if (requestParameters['withMitra'] != null) {
            queryParameters['withMitra'] = requestParameters['withMitra'];
        }

        if (requestParameters['withPelanggan'] != null) {
            queryParameters['withPelanggan'] = requestParameters['withPelanggan'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Pengguna/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PenggunaFromJSON));
    }

    /**
     */
    async penggunaGetAllGet(requestParameters: PenggunaGetAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Pengguna>> {
        const response = await this.penggunaGetAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async penggunaPutRaw(requestParameters: PenggunaPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Pengguna`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostPenggunaDTOToJSON(requestParameters['postPenggunaDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async penggunaPut(requestParameters: PenggunaPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.penggunaPutRaw(requestParameters, initOverrides);
    }

}
