/* tslint:disable */
/* eslint-disable */
/**
 * MyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetNotifikasDTO,
  Notifikasi,
  PostNotifikasDTO,
} from '../models/index';
import {
    GetNotifikasDTOFromJSON,
    GetNotifikasDTOToJSON,
    NotifikasiFromJSON,
    NotifikasiToJSON,
    PostNotifikasDTOFromJSON,
    PostNotifikasDTOToJSON,
} from '../models/index';

export interface NotifikasiGenericIdDeleteRequest {
    id: number;
}

export interface NotifikasiGenericIdGetRequest {
    id: number;
}

export interface NotifikasiReadIdPostRequest {
    id: number;
}

export interface NotifikasiRegisterDevicePostRequest {
    token?: string;
}

export interface NotifikasiSendPostRequest {
    postNotifikasDTO?: PostNotifikasDTO;
}

/**
 * 
 */
export class NotifikasiApi extends runtime.BaseAPI {

    /**
     */
    async notifikasiGenericIdDeleteRaw(requestParameters: NotifikasiGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notifikasiGenericIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Notifikasi/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notifikasiGenericIdDelete(requestParameters: NotifikasiGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notifikasiGenericIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notifikasiGenericIdGetRaw(requestParameters: NotifikasiGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Notifikasi>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notifikasiGenericIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Notifikasi/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotifikasiFromJSON(jsonValue));
    }

    /**
     */
    async notifikasiGenericIdGet(requestParameters: NotifikasiGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Notifikasi> {
        const response = await this.notifikasiGenericIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async notifikasiGetPerUserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetNotifikasDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Notifikasi/getPerUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetNotifikasDTOFromJSON));
    }

    /**
     */
    async notifikasiGetPerUserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetNotifikasDTO>> {
        const response = await this.notifikasiGetPerUserGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async notifikasiReadIdPostRaw(requestParameters: NotifikasiReadIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notifikasiReadIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Notifikasi/read/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notifikasiReadIdPost(requestParameters: NotifikasiReadIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notifikasiReadIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notifikasiRegisterDevicePostRaw(requestParameters: NotifikasiRegisterDevicePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Notifikasi/registerDevice`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notifikasiRegisterDevicePost(requestParameters: NotifikasiRegisterDevicePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notifikasiRegisterDevicePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notifikasiSendPostRaw(requestParameters: NotifikasiSendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Notifikasi/send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNotifikasDTOToJSON(requestParameters['postNotifikasDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notifikasiSendPost(requestParameters: NotifikasiSendPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notifikasiSendPostRaw(requestParameters, initOverrides);
    }

}
