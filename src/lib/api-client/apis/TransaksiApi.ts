/* tslint:disable */
/* eslint-disable */
/**
 * MyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostTransaksiDTO,
  StatusTransaksi,
  Transaksi,
} from '../models/index';
import {
    PostTransaksiDTOFromJSON,
    PostTransaksiDTOToJSON,
    StatusTransaksiFromJSON,
    StatusTransaksiToJSON,
    TransaksiFromJSON,
    TransaksiToJSON,
} from '../models/index';

export interface ApiTransaksiGetRequest {
    idMotor?: string;
    idPelanggan?: string;
    idMitra?: string;
    status?: StatusTransaksi;
}

export interface ApiTransaksiIdGetRequest {
    id: number;
}

export interface ApiTransaksiIdPutRequest {
    id: number;
    status?: StatusTransaksi;
}

export interface ApiTransaksiPostRequest {
    postTransaksiDTO?: PostTransaksiDTO;
}

/**
 * 
 */
export class TransaksiApi extends runtime.BaseAPI {

    /**
     */
    async apiTransaksiGetRaw(requestParameters: ApiTransaksiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Transaksi>>> {
        const queryParameters: any = {};

        if (requestParameters['idMotor'] != null) {
            queryParameters['IdMotor'] = requestParameters['idMotor'];
        }

        if (requestParameters['idPelanggan'] != null) {
            queryParameters['IdPelanggan'] = requestParameters['idPelanggan'];
        }

        if (requestParameters['idMitra'] != null) {
            queryParameters['IdMitra'] = requestParameters['idMitra'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['Status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Transaksi`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransaksiFromJSON));
    }

    /**
     */
    async apiTransaksiGet(requestParameters: ApiTransaksiGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Transaksi>> {
        const response = await this.apiTransaksiGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTransaksiIdGetRaw(requestParameters: ApiTransaksiIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaksi>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTransaksiIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Transaksi/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransaksiFromJSON(jsonValue));
    }

    /**
     */
    async apiTransaksiIdGet(requestParameters: ApiTransaksiIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaksi> {
        const response = await this.apiTransaksiIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTransaksiIdPutRaw(requestParameters: ApiTransaksiIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTransaksiIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Transaksi/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTransaksiIdPut(requestParameters: ApiTransaksiIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTransaksiIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTransaksiPostRaw(requestParameters: ApiTransaksiPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Transaksi`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTransaksiDTOToJSON(requestParameters['postTransaksiDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTransaksiPost(requestParameters: ApiTransaksiPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTransaksiPostRaw(requestParameters, initOverrides);
    }

}
