/* tslint:disable */
/* eslint-disable */
/**
 * MyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Mitra,
  MitraMotorDTO,
  PostCreateMitraDTO,
  PostMitraDTO,
} from '../models/index';
import {
    MitraFromJSON,
    MitraToJSON,
    MitraMotorDTOFromJSON,
    MitraMotorDTOToJSON,
    PostCreateMitraDTOFromJSON,
    PostCreateMitraDTOToJSON,
    PostMitraDTOFromJSON,
    PostMitraDTOToJSON,
} from '../models/index';

export interface MitraGenericIdDeleteRequest {
    id: number;
}

export interface MitraGenericIdGetRequest {
    id: number;
}

export interface MitraPostRequest {
    postCreateMitraDTO?: PostCreateMitraDTO;
}

export interface MitraPutRequest {
    postMitraDTO?: PostMitraDTO;
}

/**
 * 
 */
export class MitraApi extends runtime.BaseAPI {

    /**
     */
    async mitraGenericIdDeleteRaw(requestParameters: MitraGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling mitraGenericIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Mitra/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mitraGenericIdDelete(requestParameters: MitraGenericIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mitraGenericIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mitraGenericIdGetRaw(requestParameters: MitraGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Mitra>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling mitraGenericIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Mitra/generic/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MitraFromJSON(jsonValue));
    }

    /**
     */
    async mitraGenericIdGet(requestParameters: MitraGenericIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mitra> {
        const response = await this.mitraGenericIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async mitraMitraMotorGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MitraMotorDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Mitra/mitraMotor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MitraMotorDTOFromJSON));
    }

    /**
     */
    async mitraMitraMotorGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MitraMotorDTO>> {
        const response = await this.mitraMitraMotorGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async mitraPostRaw(requestParameters: MitraPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Mitra>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Mitra`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreateMitraDTOToJSON(requestParameters['postCreateMitraDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MitraFromJSON(jsonValue));
    }

    /**
     */
    async mitraPost(requestParameters: MitraPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mitra> {
        const response = await this.mitraPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async mitraPutRaw(requestParameters: MitraPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Mitra`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostMitraDTOToJSON(requestParameters['postMitraDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mitraPut(requestParameters: MitraPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mitraPutRaw(requestParameters, initOverrides);
    }

}
