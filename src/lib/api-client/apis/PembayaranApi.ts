/* tslint:disable */
/* eslint-disable */
/**
 * MyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Pembayaran,
  PostPembayaranDTO,
  PutPembayaranDTO,
} from '../models/index';
import {
    PembayaranFromJSON,
    PembayaranToJSON,
    PostPembayaranDTOFromJSON,
    PostPembayaranDTOToJSON,
    PutPembayaranDTOFromJSON,
    PutPembayaranDTOToJSON,
} from '../models/index';

export interface ApiPembayaranIdGetRequest {
    id: number;
}

export interface ApiPembayaranIdPutRequest {
    id: number;
    putPembayaranDTO?: PutPembayaranDTO;
}

export interface ApiPembayaranPostRequest {
    postPembayaranDTO?: PostPembayaranDTO;
}

export interface ApiPembayaranTransaksiIdGetRequest {
    id: number;
}

/**
 * 
 */
export class PembayaranApi extends runtime.BaseAPI {

    /**
     */
    async apiPembayaranGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Pembayaran>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Pembayaran`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PembayaranFromJSON));
    }

    /**
     */
    async apiPembayaranGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Pembayaran>> {
        const response = await this.apiPembayaranGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPembayaranIdGetRaw(requestParameters: ApiPembayaranIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPembayaranIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Pembayaran/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPembayaranIdGet(requestParameters: ApiPembayaranIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPembayaranIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPembayaranIdPutRaw(requestParameters: ApiPembayaranIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPembayaranIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Pembayaran/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPembayaranDTOToJSON(requestParameters['putPembayaranDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPembayaranIdPut(requestParameters: ApiPembayaranIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPembayaranIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPembayaranPostRaw(requestParameters: ApiPembayaranPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Pembayaran`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPembayaranDTOToJSON(requestParameters['postPembayaranDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPembayaranPost(requestParameters: ApiPembayaranPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPembayaranPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPembayaranTransaksiIdGetRaw(requestParameters: ApiPembayaranTransaksiIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pembayaran>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPembayaranTransaksiIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Pembayaran/transaksi/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PembayaranFromJSON(jsonValue));
    }

    /**
     */
    async apiPembayaranTransaksiIdGet(requestParameters: ApiPembayaranTransaksiIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pembayaran> {
        const response = await this.apiPembayaranTransaksiIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
