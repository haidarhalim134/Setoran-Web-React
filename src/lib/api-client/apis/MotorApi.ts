/* tslint:disable */
/* eslint-disable */
/**
 * MyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Diskon,
  Motor,
  MotorForm,
  MotorSorting,
  PutMotorDTO,
  StatusMotor,
  TransmisiMotor,
  Ulasan,
} from '../models/index';
import {
    DiskonFromJSON,
    DiskonToJSON,
    MotorFromJSON,
    MotorToJSON,
    MotorFormFromJSON,
    MotorFormToJSON,
    MotorSortingFromJSON,
    MotorSortingToJSON,
    PutMotorDTOFromJSON,
    PutMotorDTOToJSON,
    StatusMotorFromJSON,
    StatusMotorToJSON,
    TransmisiMotorFromJSON,
    TransmisiMotorToJSON,
    UlasanFromJSON,
    UlasanToJSON,
} from '../models/index';

export interface ApiMotorAcceptMotorIdMotorGetRequest {
    idMotor: number;
}

export interface ApiMotorGetRequest {
    withImage?: boolean;
    withDiskon?: boolean;
    withUlasan?: boolean;
    idMitra?: string;
    status?: StatusMotor;
    model?: string;
    transmisi?: TransmisiMotor;
    amountPerPage?: number;
    page?: number;
    sorting?: MotorSorting;
}

export interface ApiMotorIdDeleteRequest {
    id: number;
}

export interface ApiMotorIdDiskonsGetRequest {
    id: number;
}

export interface ApiMotorIdGetRequest {
    id: number;
}

export interface ApiMotorIdPutRequest {
    id: number;
    putMotorDTO?: PutMotorDTO;
}

export interface ApiMotorIdUlasansGetRequest {
    id: number;
}

export interface ApiMotorPostRequest {
    motorForm?: MotorForm;
}

/**
 * 
 */
export class MotorApi extends runtime.BaseAPI {

    /**
     */
    async apiMotorAcceptMotorIdMotorGetRaw(requestParameters: ApiMotorAcceptMotorIdMotorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idMotor'] == null) {
            throw new runtime.RequiredError(
                'idMotor',
                'Required parameter "idMotor" was null or undefined when calling apiMotorAcceptMotorIdMotorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Motor/acceptMotor/{idMotor}`.replace(`{${"idMotor"}}`, encodeURIComponent(String(requestParameters['idMotor']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMotorAcceptMotorIdMotorGet(requestParameters: ApiMotorAcceptMotorIdMotorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMotorAcceptMotorIdMotorGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMotorGetRaw(requestParameters: ApiMotorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Motor>>> {
        const queryParameters: any = {};

        if (requestParameters['withImage'] != null) {
            queryParameters['WithImage'] = requestParameters['withImage'];
        }

        if (requestParameters['withDiskon'] != null) {
            queryParameters['WithDiskon'] = requestParameters['withDiskon'];
        }

        if (requestParameters['withUlasan'] != null) {
            queryParameters['WithUlasan'] = requestParameters['withUlasan'];
        }

        if (requestParameters['idMitra'] != null) {
            queryParameters['IdMitra'] = requestParameters['idMitra'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['Status'] = requestParameters['status'];
        }

        if (requestParameters['model'] != null) {
            queryParameters['Model'] = requestParameters['model'];
        }

        if (requestParameters['transmisi'] != null) {
            queryParameters['Transmisi'] = requestParameters['transmisi'];
        }

        if (requestParameters['amountPerPage'] != null) {
            queryParameters['AmountPerPage'] = requestParameters['amountPerPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['Sorting'] = requestParameters['sorting'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Motor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MotorFromJSON));
    }

    /**
     */
    async apiMotorGet(requestParameters: ApiMotorGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Motor>> {
        const response = await this.apiMotorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMotorIdDeleteRaw(requestParameters: ApiMotorIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMotorIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Motor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMotorIdDelete(requestParameters: ApiMotorIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMotorIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMotorIdDiskonsGetRaw(requestParameters: ApiMotorIdDiskonsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Diskon>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMotorIdDiskonsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Motor/{id}/diskons`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DiskonFromJSON));
    }

    /**
     */
    async apiMotorIdDiskonsGet(requestParameters: ApiMotorIdDiskonsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Diskon>> {
        const response = await this.apiMotorIdDiskonsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMotorIdGetRaw(requestParameters: ApiMotorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Motor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMotorIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Motor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MotorFromJSON(jsonValue));
    }

    /**
     */
    async apiMotorIdGet(requestParameters: ApiMotorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Motor> {
        const response = await this.apiMotorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMotorIdPutRaw(requestParameters: ApiMotorIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMotorIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Motor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutMotorDTOToJSON(requestParameters['putMotorDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMotorIdPut(requestParameters: ApiMotorIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMotorIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMotorIdUlasansGetRaw(requestParameters: ApiMotorIdUlasansGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ulasan>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMotorIdUlasansGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Motor/{id}/ulasans`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UlasanFromJSON));
    }

    /**
     */
    async apiMotorIdUlasansGet(requestParameters: ApiMotorIdUlasansGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ulasan>> {
        const response = await this.apiMotorIdUlasansGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMotorPostRaw(requestParameters: ApiMotorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Motor>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Motor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MotorFormToJSON(requestParameters['motorForm']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MotorFromJSON(jsonValue));
    }

    /**
     */
    async apiMotorPost(requestParameters: ApiMotorPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Motor> {
        const response = await this.apiMotorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
